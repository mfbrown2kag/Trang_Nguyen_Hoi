import os
from google import genai
from google.genai.types import GenerateContentConfig
from dotenv import load_dotenv

# Load environment variables from config.env
load_dotenv('config.env')

# L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (h·ªó tr·ª£ c·∫£ GOOGLE_API_KEY v√† GEMINI_API_KEY)
api_key = os.getenv('GOOGLE_API_KEY') or os.getenv('GEMINI_API_KEY')
if not api_key:
    print("‚ö†Ô∏è Warning: GOOGLE_API_KEY or GEMINI_API_KEY not found in environment variables")
    print("üìù Please set your Google API key in config.env file")
    # T·∫°o client v·ªõi API key n·∫øu c√≥
    client = genai.Client(api_key=api_key) if api_key else None
else:
    print(f"‚úÖ Using Google API key: {api_key[:10]}...")
    client = genai.Client(api_key=api_key)

system : str = """
B·∫°n l√† m·ªôt chuy√™n gia an ninh m·∫°ng v√† x·ª≠ l√Ω email b·∫±ng tr√≠ tu·ªá nh√¢n t·∫°o.  
D∆∞·ªõi ƒë√¢y l√† m·ªôt email vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c h·ªá th·ªëng AI ph√¢n lo·∫°i l√†: "{label}" (v√≠ d·ª•: l·ª´a ƒë·∫£o, qu·∫£ng c√°o, th√¥ng b√°o, v.v.).  
H√£y ph√¢n t√≠ch **v√¨ sao h·ªá th·ªëng ƒë√£ ph√¢n lo·∫°i email n√†y nh∆∞ v·∫≠y** d·ª±a tr√™n n·ªôi dung c·ªßa n√≥.

B·∫°n c·∫ßn:
- Nh·∫≠n di·ªán c√°c c·ª•m t·ª´, c·∫•u tr√∫c, d·∫•u hi·ªáu ƒë·∫∑c tr∆∞ng cho nh√£n "{label}" trong email.
- Gi·∫£i th√≠ch logic m√† m·ªôt m√¥ h√¨nh h·ªçc m√°y c√≥ th·ªÉ d√πng ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh n√†y (v√≠ d·ª•: ngram, t·ª´ kh√≥a, gi·ªçng vƒÉn, m·ª•c ƒë√≠ch).
- Tr√¨nh b√†y ph√¢n t√≠ch m·ªôt c√°ch ng·∫Øn g·ªçn, logic, v√† d·ªÖ hi·ªÉu.

Ch·ªâ ph√¢n t√≠ch d·ª±a tr√™n n·ªôi dung email, kh√¥ng ph·ªèng ƒëo√°n th√™m ngo√†i vƒÉn b·∫£n.

N·∫øu kh√¥ng ƒë·ªß d·ªØ ki·ªán, h√£y n√≥i r√µ r·∫±ng n·ªôi dung ch∆∞a ƒë·ªß ƒë·ªÉ ch·∫Øc ch·∫Øn.

---
V√≠ d·ª•:
"""

class Answer_Question_From_Documents:
    def __init__(self, question: str, context : str) -> None:
        self.question : str = question
        self.context : str = context

    def run(self):
        if not client:
            return "‚ùå L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Google AI API. Vui l√≤ng ki·ªÉm tra API key."
        
        prompt : str = f"""      
        C√¢u h·ªèi:
        {self.question}
        Th√¥ng tin:
        {self.context}      
        Tr·∫£ l·ªùi:"""
        try:
            response = client.models.generate_content(
                model="gemini-2.5-flash",
                contents= prompt,
                config=GenerateContentConfig(
                    system_instruction=[
                        system
                    ]
                )
            )
            return response.text
        except Exception as e:
            return f"‚ùå L·ªói khi g·ªçi Google AI API: {str(e)}"