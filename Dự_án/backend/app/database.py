"""
Database Connection - MySQL cho gi√°m kh·∫£o
========================================

Module k·∫øt n·ªëi MySQL database cho Email Guardian.
T·ªëi ∆∞u cho k·∫øt n·ªëi database c·ªßa gi√°m kh·∫£o.
"""

import mysql.connector
import logging
import os
from datetime import datetime
from typing import Dict, Any, List, Optional

# Setup logging
logger = logging.getLogger(__name__)

def load_config():
    """Load config t·ª´ file config.env"""
    config = {}
    try:
        if os.path.exists('config.env'):
            with open('config.env', 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        config[key.strip()] = value.strip()
        logger.info("‚úÖ Config loaded from config.env")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Failed to load config: {e}")
    
    return config

class DatabaseManager:
    """Qu·∫£n l√Ω k·∫øt n·ªëi MySQL database"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o database manager"""
        self.connection = None
        self.cursor = None
        self._connect()
    
    def _connect(self):
        """K·∫øt n·ªëi MySQL database"""
        try:
            # Load config
            config = load_config()
            
            # C·∫•u h√¨nh MySQL - t·ª´ config.env ho·∫∑c default
            db_config = {
                'host': config.get('DB_HOST', '62.146.236.71'),
                'user': config.get('DB_USER', 'trang-nguyen-hoi'),
                'password': config.get('DB_PASSWORD', 'HCfibCPw4snScdSA'),
                'database': config.get('DB_NAME', 'email_guardian'),
                'port': int(config.get('DB_PORT', 3306)),
                'charset': 'utf8mb4',
                'autocommit': True,
                'connect_timeout': 10,
                'use_unicode': True
            }
            
            logger.info(f"üîó Connecting to MySQL: {db_config['host']}:{db_config['port']}")
            logger.info(f"üë§ User: {db_config['user']}")
            logger.info(f"üóÑÔ∏è Database: {db_config['database']}")
            
            self.connection = mysql.connector.connect(**db_config)
            self.cursor = self.connection.cursor(dictionary=True)
            
            logger.info("‚úÖ MySQL database connected successfully")
            
            # T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
            self._create_tables()
            
        except mysql.connector.Error as e:
            logger.error(f"‚ùå MySQL connection failed: {e}")
            self.connection = None
            self.cursor = None
    
    def _create_tables(self):
        """T·∫°o c√°c b·∫£ng c·∫ßn thi·∫øt"""
        try:
            if not self.cursor:
                logger.warning("‚ö†Ô∏è No database cursor available")
                return
                
            # B·∫£ng l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch email
            create_analysis_table = """
            CREATE TABLE IF NOT EXISTS email_analysis (
                id INT AUTO_INCREMENT PRIMARY KEY,
                email_text TEXT NOT NULL,
                classification VARCHAR(50) NOT NULL,
                confidence FLOAT NOT NULL,
                explanation TEXT NOT NULL,
                risk_score INT NOT NULL,
                recommendations JSON,
                processing_time INT NOT NULL,
                ai_used BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_classification (classification),
                INDEX idx_created_at (created_at)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """
            
            # B·∫£ng l∆∞u th·ªëng k√™
            create_stats_table = """
            CREATE TABLE IF NOT EXISTS analysis_stats (
                id INT AUTO_INCREMENT PRIMARY KEY,
                date DATE NOT NULL,
                total_emails INT DEFAULT 0,
                safe_count INT DEFAULT 0,
                spam_count INT DEFAULT 0,
                phishing_count INT DEFAULT 0,
                malware_count INT DEFAULT 0,
                suspicious_count INT DEFAULT 0,
                avg_processing_time FLOAT DEFAULT 0,
                ai_usage_count INT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE KEY unique_date (date)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """
            
            self.cursor.execute(create_analysis_table)
            self.cursor.execute(create_stats_table)
            
            logger.info("‚úÖ Database tables created/verified")
            
        except mysql.connector.Error as e:
            logger.error(f"‚ùå Table creation failed: {e}")
    
    def save_analysis_result(self, analysis_data: Dict[str, Any]) -> bool:
        """
        L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o database
        
        Args:
            analysis_data: D·ªØ li·ªáu ph√¢n t√≠ch email
            
        Returns:
            True n·∫øu l∆∞u th√†nh c√¥ng, False n·∫øu l·ªói
        """
        try:
            if not self.connection or not self.cursor:
                logger.warning("‚ö†Ô∏è Database not connected")
                return False
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu
            recommendations_json = analysis_data.get('recommendations', [])
            if isinstance(recommendations_json, list):
                recommendations_json = ','.join(recommendations_json)
            
            # Insert v√†o b·∫£ng email_analysis
            insert_query = """
            INSERT INTO email_analysis (
                email_text, classification, confidence, explanation,
                risk_score, recommendations, processing_time, ai_used
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """
            
            values = (
                analysis_data.get('email_text', ''),
                analysis_data.get('classification', ''),
                analysis_data.get('confidence', 0.0),
                analysis_data.get('explanation', ''),
                analysis_data.get('risk_score', 0),
                recommendations_json,
                analysis_data.get('processing_time', 0),
                analysis_data.get('ai_used', False)
            )
            
            self.cursor.execute(insert_query, values)
            
            # C·∫≠p nh·∫≠t th·ªëng k√™
            self._update_daily_stats(analysis_data)
            
            logger.info("‚úÖ Analysis result saved to database")
            return True
            
        except mysql.connector.Error as e:
            logger.error(f"‚ùå Save analysis failed: {e}")
            return False
    
    def _update_daily_stats(self, analysis_data: Dict[str, Any]):
        """C·∫≠p nh·∫≠t th·ªëng k√™ h√†ng ng√†y"""
        try:
            if not self.cursor:
                return
                
            today = datetime.now().date()
            classification = analysis_data.get('classification', '')
            processing_time = analysis_data.get('processing_time', 0)
            ai_used = analysis_data.get('ai_used', False)
            
            # Ki·ªÉm tra xem ƒë√£ c√≥ th·ªëng k√™ cho h√¥m nay ch∆∞a
            check_query = "SELECT * FROM analysis_stats WHERE date = %s"
            self.cursor.execute(check_query, (today,))
            existing_stats = self.cursor.fetchone()
            
            if existing_stats:
                # C·∫≠p nh·∫≠t th·ªëng k√™ hi·ªán c√≥
                update_query = """
                UPDATE analysis_stats SET
                    total_emails = total_emails + 1,
                    safe_count = safe_count + %s,
                    spam_count = spam_count + %s,
                    phishing_count = phishing_count + %s,
                    malware_count = malware_count + %s,
                    suspicious_count = suspicious_count + %s,
                    avg_processing_time = (avg_processing_time * total_emails + %s) / (total_emails + 1),
                    ai_usage_count = ai_usage_count + %s
                WHERE date = %s
                """
                
                # T√≠nh to√°n s·ªë l∆∞·ª£ng cho t·ª´ng lo·∫°i
                safe_count = 1 if classification == 'safe' else 0
                spam_count = 1 if classification == 'spam' else 0
                phishing_count = 1 if classification == 'phishing' else 0
                malware_count = 1 if classification == 'malware' else 0
                suspicious_count = 1 if classification == 'suspicious' else 0
                ai_usage = 1 if ai_used else 0
                
                values = (
                    safe_count, spam_count, phishing_count, malware_count, suspicious_count,
                    processing_time, ai_usage, today
                )
                
                self.cursor.execute(update_query, values)
                
            else:
                # T·∫°o th·ªëng k√™ m·ªõi cho h√¥m nay
                insert_query = """
                INSERT INTO analysis_stats (
                    date, total_emails, safe_count, spam_count, phishing_count,
                    malware_count, suspicious_count, avg_processing_time, ai_usage_count
                ) VALUES (%s, 1, %s, %s, %s, %s, %s, %s, %s)
                """
                
                safe_count = 1 if classification == 'safe' else 0
                spam_count = 1 if classification == 'spam' else 0
                phishing_count = 1 if classification == 'phishing' else 0
                malware_count = 1 if classification == 'malware' else 0
                suspicious_count = 1 if classification == 'suspicious' else 0
                ai_usage = 1 if ai_used else 0
                
                values = (
                    today, safe_count, spam_count, phishing_count, 
                    malware_count, suspicious_count, processing_time, ai_usage
                )
                
                self.cursor.execute(insert_query, values)
                
        except mysql.connector.Error as e:
            logger.error(f"‚ùå Update stats failed: {e}")
    
    def get_recent_analyses(self, limit: int = 10) -> List[Dict[str, Any]]:
        """
        L·∫•y danh s√°ch ph√¢n t√≠ch g·∫ßn ƒë√¢y
        
        Args:
            limit: S·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ
            
        Returns:
            List c√°c k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        try:
            if not self.connection or not self.cursor:
                return []
            
            query = """
            SELECT * FROM email_analysis 
            ORDER BY created_at DESC 
            LIMIT %s
            """
            
            self.cursor.execute(query, (limit,))
            results = self.cursor.fetchall()
            
            return results
            
        except mysql.connector.Error as e:
            logger.error(f"‚ùå Get recent analyses failed: {e}")
            return []
    
    def get_daily_stats(self, days: int = 7) -> List[Dict[str, Any]]:
        """
        L·∫•y th·ªëng k√™ h√†ng ng√†y
        
        Args:
            days: S·ªë ng√†y l·∫•y th·ªëng k√™
            
        Returns:
            List th·ªëng k√™ h√†ng ng√†y
        """
        try:
            if not self.connection or not self.cursor:
                return []
            
            query = """
            SELECT * FROM analysis_stats 
            ORDER BY date DESC 
            LIMIT %s
            """
            
            self.cursor.execute(query, (days,))
            results = self.cursor.fetchall()
            
            return results
            
        except mysql.connector.Error as e:
            logger.error(f"‚ùå Get daily stats failed: {e}")
            return []
    
    def get_classification_stats(self) -> Dict[str, int]:
        """
        L·∫•y th·ªëng k√™ ph√¢n lo·∫°i
        
        Returns:
            Dict v·ªõi s·ªë l∆∞·ª£ng t·ª´ng lo·∫°i
        """
        try:
            if not self.connection or not self.cursor:
                return {}
            
            query = """
            SELECT classification, COUNT(*) as count 
            FROM email_analysis 
            GROUP BY classification
            """
            
            self.cursor.execute(query)
            results = self.cursor.fetchall()
            
            stats = {}
            for row in results:
                stats[row['classification']] = row['count']
            
            return stats
            
        except mysql.connector.Error as e:
            logger.error(f"‚ùå Get classification stats failed: {e}")
            return {}
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi database"""
        try:
            if self.cursor:
                self.cursor.close()
            if self.connection:
                self.connection.close()
            logger.info("‚úÖ Database connection closed")
        except Exception as e:
            logger.error(f"‚ùå Close database failed: {e}")

# Global database instance
db_manager = None

def get_database():
    """L·∫•y instance database manager"""
    global db_manager
    if db_manager is None:
        db_manager = DatabaseManager()
    return db_manager 